import { Logger } from './logger.js';
type Imports = Record<string, string>;
interface ImportMapSource {
    baseURL: URL;
    imports: Imports;
    scopes?: Record<string, Imports>;
}
declare class ImportMap {
    sources: ImportMapSource[];
    constructor(sources?: ImportMapSource[]);
    static resolve(source: ImportMapSource, basePath?: string, prefix?: string): {
        imports: Record<string, string>;
        scopes: Record<string, Imports>;
    };
    static resolveImports(imports: Record<string, URL | null>, basePath?: string, prefix?: string): Record<string, string>;
    static resolvePath(url: URL, basePath?: string, prefix?: string): string;
    add(source: ImportMapSource): void;
    addFile(path: string, logger: Logger): Promise<void>;
    addFiles(paths: (string | undefined)[], logger: Logger): Promise<void>;
    getContents(basePath?: string, prefix?: string): {
        imports: Imports;
        scopes: Record<string, Imports>;
    };
    toDataURL(): string;
    writeToFile(path: string): Promise<void>;
}
declare const readFile: (path: string, logger: Logger) => Promise<ImportMapSource>;
export { ImportMap, readFile };
export type { ImportMapSource as ImportMapFile };
