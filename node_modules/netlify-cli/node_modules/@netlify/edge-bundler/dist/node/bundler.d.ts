import { OnAfterDownloadHook, OnBeforeDownloadHook } from './bridge.js';
import { Declaration } from './declaration.js';
import { FeatureFlags } from './feature_flags.js';
import { LogFunction } from './logger.js';
interface BundleOptions {
    basePath?: string;
    cacheDirectory?: string;
    configPath?: string;
    debug?: boolean;
    distImportMapPath?: string;
    featureFlags?: FeatureFlags;
    importMapPaths?: (string | undefined)[];
    onAfterDownload?: OnAfterDownloadHook;
    onBeforeDownload?: OnBeforeDownloadHook;
    systemLogger?: LogFunction;
    internalSrcFolder?: string;
    bootstrapURL?: string;
}
declare const bundle: (sourceDirectories: string[], distDirectory: string, tomlDeclarations?: Declaration[], { basePath: inputBasePath, cacheDirectory, configPath, debug, distImportMapPath, featureFlags: inputFeatureFlags, importMapPaths, onAfterDownload, onBeforeDownload, systemLogger, internalSrcFolder, bootstrapURL, }?: BundleOptions) => Promise<{
    functions: import("./edge_function.js").EdgeFunction[];
    manifest: import("./manifest.js").Manifest;
}>;
export { bundle };
export type { BundleOptions };
